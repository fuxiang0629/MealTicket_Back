//------------------------------------------------------------------------------
// <auto-generated>
//     此代码已从模板生成。
//
//     手动更改此文件可能导致应用程序出现意外的行为。
//     如果重新生成代码，将覆盖对此文件的手动更改。
// </auto-generated>
//------------------------------------------------------------------------------

namespace MealTicket_Admin_Handler
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class meal_ticketEntities : DbContext
    {
        public meal_ticketEntities()
            : base("name=meal_ticketEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<t_admin_department> t_admin_department { get; set; }
        public virtual DbSet<t_authority_admin_visitlog> t_authority_admin_visitlog { get; set; }
        public virtual DbSet<t_admin_api> t_admin_api { get; set; }
        public virtual DbSet<t_admin_baseinfo> t_admin_baseinfo { get; set; }
        public virtual DbSet<t_admin_position> t_admin_position { get; set; }
        public virtual DbSet<t_admin_menu> t_admin_menu { get; set; }
        public virtual DbSet<t_admin_right> t_admin_right { get; set; }
        public virtual DbSet<t_admin_role> t_admin_role { get; set; }
        public virtual DbSet<t_admin_role_right_rel> t_admin_role_right_rel { get; set; }
        public virtual DbSet<t_admin_role_rel> t_admin_role_rel { get; set; }
        public virtual DbSet<t_admin_login_token> t_admin_login_token { get; set; }
        public virtual DbSet<t_admin_loginLog> t_admin_loginLog { get; set; }
        public virtual DbSet<t_admin_operationLog> t_admin_operationLog { get; set; }
        public virtual DbSet<t_system_param> t_system_param { get; set; }
        public virtual DbSet<t_helpcenter_question_content> t_helpcenter_question_content { get; set; }
        public virtual DbSet<t_helpcenter_question_type> t_helpcenter_question_type { get; set; }
        public virtual DbSet<t_helpcenter_question_type_content_rel> t_helpcenter_question_type_content_rel { get; set; }
        public virtual DbSet<t_server> t_server { get; set; }
        public virtual DbSet<t_broker> t_broker { get; set; }
        public virtual DbSet<t_broker_department> t_broker_department { get; set; }
        public virtual DbSet<t_broker_host> t_broker_host { get; set; }
        public virtual DbSet<t_shares_today> t_shares_today { get; set; }
        public virtual DbSet<t_shares_quotes> t_shares_quotes { get; set; }
        public virtual DbSet<t_shares_search> t_shares_search { get; set; }
        public virtual DbSet<t_account_bank_card> t_account_bank_card { get; set; }
        public virtual DbSet<t_account_baseinfo> t_account_baseinfo { get; set; }
        public virtual DbSet<t_account_wallet> t_account_wallet { get; set; }
        public virtual DbSet<t_account_login_token> t_account_login_token { get; set; }
        public virtual DbSet<t_bank> t_bank { get; set; }
        public virtual DbSet<t_account_registerLog> t_account_registerLog { get; set; }
        public virtual DbSet<t_page_setting> t_page_setting { get; set; }
        public virtual DbSet<t_customerservice_setting> t_customerservice_setting { get; set; }
        public virtual DbSet<t_banner> t_banner { get; set; }
        public virtual DbSet<t_information> t_information { get; set; }
        public virtual DbSet<t_payment_account_settings> t_payment_account_settings { get; set; }
        public virtual DbSet<t_payment_channel> t_payment_channel { get; set; }
        public virtual DbSet<t_payment_channel_account_rel> t_payment_channel_account_rel { get; set; }
        public virtual DbSet<t_payment_account> t_payment_account { get; set; }
        public virtual DbSet<t_banner_group> t_banner_group { get; set; }
        public virtual DbSet<t_payment_cash_channel> t_payment_cash_channel { get; set; }
        public virtual DbSet<t_payment_cash_channel_refund_account_rel> t_payment_cash_channel_refund_account_rel { get; set; }
        public virtual DbSet<t_payment_cash_channel_transfer_account_rel> t_payment_cash_channel_transfer_account_rel { get; set; }
        public virtual DbSet<t_recharge_record> t_recharge_record { get; set; }
        public virtual DbSet<t_account_cash_record> t_account_cash_record { get; set; }
        public virtual DbSet<t_account_cash_record_details> t_account_cash_record_details { get; set; }
        public virtual DbSet<t_shares_limit> t_shares_limit { get; set; }
        public virtual DbSet<t_shares_limit_date> t_shares_limit_date { get; set; }
        public virtual DbSet<t_shares_limit_date_group> t_shares_limit_date_group { get; set; }
        public virtual DbSet<t_shares_limit_time> t_shares_limit_time { get; set; }
        public virtual DbSet<t_shares_limit_traderules_other> t_shares_limit_traderules_other { get; set; }
        public virtual DbSet<t_account_shares_entrust_manager> t_account_shares_entrust_manager { get; set; }
        public virtual DbSet<t_account_realname> t_account_realname { get; set; }
        public virtual DbSet<t_account_shares_entrust> t_account_shares_entrust { get; set; }
        public virtual DbSet<t_account_shares_entrust_manager_dealdetails> t_account_shares_entrust_manager_dealdetails { get; set; }
        public virtual DbSet<t_shares_all> t_shares_all { get; set; }
        public virtual DbSet<t_shares_limit_traderules> t_shares_limit_traderules { get; set; }
        public virtual DbSet<t_shares_suspension> t_shares_suspension { get; set; }
        public virtual DbSet<t_broker_account_info_capital> t_broker_account_info_capital { get; set; }
        public virtual DbSet<t_broker_account_info_position> t_broker_account_info_position { get; set; }
        public virtual DbSet<t_shares_hq_host> t_shares_hq_host { get; set; }
        public virtual DbSet<t_shares_markettime> t_shares_markettime { get; set; }
        public virtual DbSet<t_shares_limit_risk> t_shares_limit_risk { get; set; }
        public virtual DbSet<t_shares_limit_tradequota> t_shares_limit_tradequota { get; set; }
        public virtual DbSet<t_shares_limit_tradequota_other> t_shares_limit_tradequota_other { get; set; }
        public virtual DbSet<t_shares_limit_fundmultiple> t_shares_limit_fundmultiple { get; set; }
        public virtual DbSet<t_account_wallet_change_record> t_account_wallet_change_record { get; set; }
        public virtual DbSet<t_account_recommend_prize_type> t_account_recommend_prize_type { get; set; }
        public virtual DbSet<t_account_recommend_prize_type_level> t_account_recommend_prize_type_level { get; set; }
        public virtual DbSet<t_account_par_setting> t_account_par_setting { get; set; }
        public virtual DbSet<t_platform_wallet> t_platform_wallet { get; set; }
        public virtual DbSet<t_broker_account_shares_rel> t_broker_account_shares_rel { get; set; }
        public virtual DbSet<t_broker_account_shares_rel_entrust> t_broker_account_shares_rel_entrust { get; set; }
        public virtual DbSet<t_shares_all_corrigendum> t_shares_all_corrigendum { get; set; }
        public virtual DbSet<t_broker_account_info> t_broker_account_info { get; set; }
        public virtual DbSet<t_server_broker_account_rel> t_server_broker_account_rel { get; set; }
        public virtual DbSet<t_account_shares_hold_manager> t_account_shares_hold_manager { get; set; }
        public virtual DbSet<t_account_shares_hold_deposit_changelog> t_account_shares_hold_deposit_changelog { get; set; }
        public virtual DbSet<t_account_shares_hold_fundamount_changelog> t_account_shares_hold_fundamount_changelog { get; set; }
        public virtual DbSet<t_dim_time> t_dim_time { get; set; }
        public virtual DbSet<t_sms_channel_app> t_sms_channel_app { get; set; }
        public virtual DbSet<t_sms_channel> t_sms_channel { get; set; }
        public virtual DbSet<t_sms_sign> t_sms_sign { get; set; }
        public virtual DbSet<t_sms_template> t_sms_template { get; set; }
        public virtual DbSet<t_notice_setting> t_notice_setting { get; set; }
        public virtual DbSet<t_account_api> t_account_api { get; set; }
        public virtual DbSet<t_notice_send_record> t_notice_send_record { get; set; }
        public virtual DbSet<t_notice_send_record_details> t_notice_send_record_details { get; set; }
        public virtual DbSet<t_account_shares_hold> t_account_shares_hold { get; set; }
        public virtual DbSet<t_push_channel> t_push_channel { get; set; }
        public virtual DbSet<t_push_channel_app> t_push_channel_app { get; set; }
        public virtual DbSet<t_push_tag> t_push_tag { get; set; }
        public virtual DbSet<t_push_template> t_push_template { get; set; }
        public virtual DbSet<t_shares_allot> t_shares_allot { get; set; }
        public virtual DbSet<t_shares_allot_account> t_shares_allot_account { get; set; }
        public virtual DbSet<t_message> t_message { get; set; }
        public virtual DbSet<t_message_group> t_message_group { get; set; }
        public virtual DbSet<t_message_group_rel> t_message_group_rel { get; set; }
        public virtual DbSet<t_message_template> t_message_template { get; set; }
        public virtual DbSet<t_admin_right_api_rel> t_admin_right_api_rel { get; set; }
        public virtual DbSet<t_shares_transactiondata> t_shares_transactiondata { get; set; }
        public virtual DbSet<t_account_loginlog> t_account_loginlog { get; set; }
        public virtual DbSet<t_shares_monitor_trend> t_shares_monitor_trend { get; set; }
        public virtual DbSet<t_shares_monitor_trend_par> t_shares_monitor_trend_par { get; set; }
        public virtual DbSet<t_shares_monitor_trend_rel> t_shares_monitor_trend_rel { get; set; }
        public virtual DbSet<t_shares_monitor_trend_rel_par> t_shares_monitor_trend_rel_par { get; set; }
        public virtual DbSet<t_account_shares_optional_seat_rel> t_account_shares_optional_seat_rel { get; set; }
        public virtual DbSet<t_account_shares_seat> t_account_shares_seat { get; set; }
        public virtual DbSet<t_account_shares_optional> t_account_shares_optional { get; set; }
        public virtual DbSet<t_shares_monitor> t_shares_monitor { get; set; }
        public virtual DbSet<t_payment_channel_group> t_payment_channel_group { get; set; }
        public virtual DbSet<t_account_shares_optional_trend_rel> t_account_shares_optional_trend_rel { get; set; }
        public virtual DbSet<t_account_shares_optional_trend_rel_par> t_account_shares_optional_trend_rel_par { get; set; }
        public virtual DbSet<t_account_shares_optional_trend_rel_tri_record> t_account_shares_optional_trend_rel_tri_record { get; set; }
        public virtual DbSet<t_goods> t_goods { get; set; }
        public virtual DbSet<t_account_shares_optional_trend_rel_tri> t_account_shares_optional_trend_rel_tri { get; set; }
        public virtual DbSet<t_account_shares_optional_trend_rel_tri_record_statistic> t_account_shares_optional_trend_rel_tri_record_statistic { get; set; }
        public virtual DbSet<t_account_follow_rel> t_account_follow_rel { get; set; }
        public virtual DbSet<t_app_version> t_app_version { get; set; }
        public virtual DbSet<t_account_follow_apply_record> t_account_follow_apply_record { get; set; }
        public virtual DbSet<t_account_shares_optional_group> t_account_shares_optional_group { get; set; }
        public virtual DbSet<t_account_shares_optional_group_rel> t_account_shares_optional_group_rel { get; set; }
        public virtual DbSet<t_shares_limit_fundmultiple_account> t_shares_limit_fundmultiple_account { get; set; }
        public virtual DbSet<t_shares_plate> t_shares_plate { get; set; }
        public virtual DbSet<t_shares_plate_rel> t_shares_plate_rel { get; set; }
        public virtual DbSet<t_account_shares_conditiontrade_template_sell_child> t_account_shares_conditiontrade_template_sell_child { get; set; }
        public virtual DbSet<t_sys_conditiontrade_template> t_sys_conditiontrade_template { get; set; }
        public virtual DbSet<t_sys_conditiontrade_template_sell> t_sys_conditiontrade_template_sell { get; set; }
        public virtual DbSet<t_sys_conditiontrade_template_sell_child> t_sys_conditiontrade_template_sell_child { get; set; }
        public virtual DbSet<t_sys_conditiontrade_template_buy_auto> t_sys_conditiontrade_template_buy_auto { get; set; }
        public virtual DbSet<t_sys_conditiontrade_template_buy_auto_trend> t_sys_conditiontrade_template_buy_auto_trend { get; set; }
        public virtual DbSet<t_sys_conditiontrade_template_buy_auto_trend_par> t_sys_conditiontrade_template_buy_auto_trend_par { get; set; }
        public virtual DbSet<t_sys_conditiontrade_template_buy_child> t_sys_conditiontrade_template_buy_child { get; set; }
        public virtual DbSet<t_sys_conditiontrade_template_buy_other_trend> t_sys_conditiontrade_template_buy_other_trend { get; set; }
        public virtual DbSet<t_sys_conditiontrade_template_buy_other_trend_par> t_sys_conditiontrade_template_buy_other_trend_par { get; set; }
        public virtual DbSet<t_sys_conditiontrade_template_buy> t_sys_conditiontrade_template_buy { get; set; }
        public virtual DbSet<t_account_shares_conditiontrade_buy_trend_par_template> t_account_shares_conditiontrade_buy_trend_par_template { get; set; }
        public virtual DbSet<t_sys_conditiontrade_template_buy_other> t_sys_conditiontrade_template_buy_other { get; set; }
    
        public virtual int P_Admin_CheckLogin(string token, ObjectParameter errorCode, ObjectParameter errorMessage, ObjectParameter accountId, ObjectParameter loginLogId)
        {
            var tokenParameter = token != null ?
                new ObjectParameter("token", token) :
                new ObjectParameter("token", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("P_Admin_CheckLogin", tokenParameter, errorCode, errorMessage, accountId, loginLogId);
        }
    
        public virtual int P_Admin_Login(string userName, string password, string ipAddress, string deviceUA, ObjectParameter errorCode, ObjectParameter errorMessage, ObjectParameter token, ObjectParameter accountId, ObjectParameter isAdministrator)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("userName", userName) :
                new ObjectParameter("userName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var ipAddressParameter = ipAddress != null ?
                new ObjectParameter("ipAddress", ipAddress) :
                new ObjectParameter("ipAddress", typeof(string));
    
            var deviceUAParameter = deviceUA != null ?
                new ObjectParameter("deviceUA", deviceUA) :
                new ObjectParameter("deviceUA", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("P_Admin_Login", userNameParameter, passwordParameter, ipAddressParameter, deviceUAParameter, errorCode, errorMessage, token, accountId, isAdministrator);
        }
    
        public virtual int P_Admin_ModifyPassword(Nullable<long> accountId, string oldPassword, string newPassword, Nullable<long> loginLogId, ObjectParameter errorCode, ObjectParameter errorMessage, ObjectParameter token)
        {
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("accountId", accountId) :
                new ObjectParameter("accountId", typeof(long));
    
            var oldPasswordParameter = oldPassword != null ?
                new ObjectParameter("oldPassword", oldPassword) :
                new ObjectParameter("oldPassword", typeof(string));
    
            var newPasswordParameter = newPassword != null ?
                new ObjectParameter("newPassword", newPassword) :
                new ObjectParameter("newPassword", typeof(string));
    
            var loginLogIdParameter = loginLogId.HasValue ?
                new ObjectParameter("loginLogId", loginLogId) :
                new ObjectParameter("loginLogId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("P_Admin_ModifyPassword", accountIdParameter, oldPasswordParameter, newPasswordParameter, loginLogIdParameter, errorCode, errorMessage, token);
        }
    
        public virtual int P_Admin_AddBackAccount(string userName, string password, string realName, string mobile, Nullable<int> sex, string email, Nullable<long> departmentId, Nullable<long> positionId, ObjectParameter errorCode, ObjectParameter errorMessage)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("userName", userName) :
                new ObjectParameter("userName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var realNameParameter = realName != null ?
                new ObjectParameter("realName", realName) :
                new ObjectParameter("realName", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("mobile", mobile) :
                new ObjectParameter("mobile", typeof(string));
    
            var sexParameter = sex.HasValue ?
                new ObjectParameter("sex", sex) :
                new ObjectParameter("sex", typeof(int));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("departmentId", departmentId) :
                new ObjectParameter("departmentId", typeof(long));
    
            var positionIdParameter = positionId.HasValue ?
                new ObjectParameter("positionId", positionId) :
                new ObjectParameter("positionId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("P_Admin_AddBackAccount", userNameParameter, passwordParameter, realNameParameter, mobileParameter, sexParameter, emailParameter, departmentIdParameter, positionIdParameter, errorCode, errorMessage);
        }
    
        public virtual int P_Admin_ModifyBackAccount(Nullable<long> accountId, Nullable<long> loginLogId, string userName, string realName, string mobile, Nullable<int> sex, string email, Nullable<long> departmentId, Nullable<long> positionId, ObjectParameter errorCode, ObjectParameter errorMessage)
        {
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("accountId", accountId) :
                new ObjectParameter("accountId", typeof(long));
    
            var loginLogIdParameter = loginLogId.HasValue ?
                new ObjectParameter("loginLogId", loginLogId) :
                new ObjectParameter("loginLogId", typeof(long));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("userName", userName) :
                new ObjectParameter("userName", typeof(string));
    
            var realNameParameter = realName != null ?
                new ObjectParameter("realName", realName) :
                new ObjectParameter("realName", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("mobile", mobile) :
                new ObjectParameter("mobile", typeof(string));
    
            var sexParameter = sex.HasValue ?
                new ObjectParameter("sex", sex) :
                new ObjectParameter("sex", typeof(int));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("departmentId", departmentId) :
                new ObjectParameter("departmentId", typeof(long));
    
            var positionIdParameter = positionId.HasValue ?
                new ObjectParameter("positionId", positionId) :
                new ObjectParameter("positionId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("P_Admin_ModifyBackAccount", accountIdParameter, loginLogIdParameter, userNameParameter, realNameParameter, mobileParameter, sexParameter, emailParameter, departmentIdParameter, positionIdParameter, errorCode, errorMessage);
        }
    
        public virtual int P_Admin_DeleteBackAccount(Nullable<long> accountId, ObjectParameter errorCode, ObjectParameter errorMessage)
        {
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("accountId", accountId) :
                new ObjectParameter("accountId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("P_Admin_DeleteBackAccount", accountIdParameter, errorCode, errorMessage);
        }
    
        public virtual int P_Admin_ModifyBackAccountPassword(Nullable<long> accountId, string newPassword, ObjectParameter errorCode, ObjectParameter errorMessage)
        {
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("accountId", accountId) :
                new ObjectParameter("accountId", typeof(long));
    
            var newPasswordParameter = newPassword != null ?
                new ObjectParameter("newPassword", newPassword) :
                new ObjectParameter("newPassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("P_Admin_ModifyBackAccountPassword", accountIdParameter, newPasswordParameter, errorCode, errorMessage);
        }
    
        public virtual int P_Admin_AddBackAccountRole(string roleName, string roleDescription, ObjectParameter errorCode, ObjectParameter errorMessage)
        {
            var roleNameParameter = roleName != null ?
                new ObjectParameter("roleName", roleName) :
                new ObjectParameter("roleName", typeof(string));
    
            var roleDescriptionParameter = roleDescription != null ?
                new ObjectParameter("roleDescription", roleDescription) :
                new ObjectParameter("roleDescription", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("P_Admin_AddBackAccountRole", roleNameParameter, roleDescriptionParameter, errorCode, errorMessage);
        }
    
        public virtual int P_Admin_ModifyBackAccountRole(Nullable<long> roleId, string roleName, string roleDescription, ObjectParameter errorCode, ObjectParameter errorMessage)
        {
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("roleId", roleId) :
                new ObjectParameter("roleId", typeof(long));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("roleName", roleName) :
                new ObjectParameter("roleName", typeof(string));
    
            var roleDescriptionParameter = roleDescription != null ?
                new ObjectParameter("roleDescription", roleDescription) :
                new ObjectParameter("roleDescription", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("P_Admin_ModifyBackAccountRole", roleIdParameter, roleNameParameter, roleDescriptionParameter, errorCode, errorMessage);
        }
    
        public virtual int P_Admin_DeleteBackAccountRole(Nullable<long> roleId, ObjectParameter errorCode, ObjectParameter errorMessage)
        {
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("roleId", roleId) :
                new ObjectParameter("roleId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("P_Admin_DeleteBackAccountRole", roleIdParameter, errorCode, errorMessage);
        }
    
        public virtual int P_Admin_Logout(Nullable<long> accountId, Nullable<long> loginLogId, ObjectParameter errorCode, ObjectParameter errorMessage)
        {
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("accountId", accountId) :
                new ObjectParameter("accountId", typeof(long));
    
            var loginLogIdParameter = loginLogId.HasValue ?
                new ObjectParameter("loginLogId", loginLogId) :
                new ObjectParameter("loginLogId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("P_Admin_Logout", accountIdParameter, loginLogIdParameter, errorCode, errorMessage);
        }
    
        public virtual int P_Admin_ModifyFrontAccountWallet(Nullable<long> accountId, Nullable<long> addDeposit, string remark, ObjectParameter errorCode, ObjectParameter errorMessage)
        {
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("accountId", accountId) :
                new ObjectParameter("accountId", typeof(long));
    
            var addDepositParameter = addDeposit.HasValue ?
                new ObjectParameter("addDeposit", addDeposit) :
                new ObjectParameter("addDeposit", typeof(long));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("remark", remark) :
                new ObjectParameter("remark", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("P_Admin_ModifyFrontAccountWallet", accountIdParameter, addDepositParameter, remarkParameter, errorCode, errorMessage);
        }
    
        public virtual int P_Admin_Cash_StartHandle(Nullable<long> cashRecordId, ObjectParameter errorCode, ObjectParameter errorMessage)
        {
            var cashRecordIdParameter = cashRecordId.HasValue ?
                new ObjectParameter("cashRecordId", cashRecordId) :
                new ObjectParameter("cashRecordId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("P_Admin_Cash_StartHandle", cashRecordIdParameter, errorCode, errorMessage);
        }
    
        public virtual int P_Admin_Cash_CancelHandle(Nullable<long> cashRecordId, ObjectParameter errorCode, ObjectParameter errorMessage)
        {
            var cashRecordIdParameter = cashRecordId.HasValue ?
                new ObjectParameter("cashRecordId", cashRecordId) :
                new ObjectParameter("cashRecordId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("P_Admin_Cash_CancelHandle", cashRecordIdParameter, errorCode, errorMessage);
        }
    
        public virtual int P_Admin_Cash_Finish(Nullable<long> cashRecordId, string remark, Nullable<long> accountId, ObjectParameter errorCode, ObjectParameter errorMessage)
        {
            var cashRecordIdParameter = cashRecordId.HasValue ?
                new ObjectParameter("cashRecordId", cashRecordId) :
                new ObjectParameter("cashRecordId", typeof(long));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("remark", remark) :
                new ObjectParameter("remark", typeof(string));
    
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("accountId", accountId) :
                new ObjectParameter("accountId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("P_Admin_Cash_Finish", cashRecordIdParameter, remarkParameter, accountIdParameter, errorCode, errorMessage);
        }
    
        public virtual int P_Admin_Cash_Start(Nullable<long> cashRecordId, string paymentChannel, Nullable<int> type, Nullable<long> paymentAccountId, Nullable<long> applyAmount, string voucherImg, Nullable<long> accountId, ObjectParameter errorCode, ObjectParameter errorMessage)
        {
            var cashRecordIdParameter = cashRecordId.HasValue ?
                new ObjectParameter("cashRecordId", cashRecordId) :
                new ObjectParameter("cashRecordId", typeof(long));
    
            var paymentChannelParameter = paymentChannel != null ?
                new ObjectParameter("paymentChannel", paymentChannel) :
                new ObjectParameter("paymentChannel", typeof(string));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(int));
    
            var paymentAccountIdParameter = paymentAccountId.HasValue ?
                new ObjectParameter("paymentAccountId", paymentAccountId) :
                new ObjectParameter("paymentAccountId", typeof(long));
    
            var applyAmountParameter = applyAmount.HasValue ?
                new ObjectParameter("applyAmount", applyAmount) :
                new ObjectParameter("applyAmount", typeof(long));
    
            var voucherImgParameter = voucherImg != null ?
                new ObjectParameter("voucherImg", voucherImg) :
                new ObjectParameter("voucherImg", typeof(string));
    
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("accountId", accountId) :
                new ObjectParameter("accountId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("P_Admin_Cash_Start", cashRecordIdParameter, paymentChannelParameter, typeParameter, paymentAccountIdParameter, applyAmountParameter, voucherImgParameter, accountIdParameter, errorCode, errorMessage);
        }
    
        public virtual int P_ApplyTradeSell(Nullable<long> accountId, Nullable<long> holdId, Nullable<int> sellCount, Nullable<int> sellType, Nullable<long> sellPrice, Nullable<int> type, Nullable<bool> isFollow, ObjectParameter errorCode, ObjectParameter errorMessage, ObjectParameter sellId)
        {
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("accountId", accountId) :
                new ObjectParameter("accountId", typeof(long));
    
            var holdIdParameter = holdId.HasValue ?
                new ObjectParameter("holdId", holdId) :
                new ObjectParameter("holdId", typeof(long));
    
            var sellCountParameter = sellCount.HasValue ?
                new ObjectParameter("sellCount", sellCount) :
                new ObjectParameter("sellCount", typeof(int));
    
            var sellTypeParameter = sellType.HasValue ?
                new ObjectParameter("sellType", sellType) :
                new ObjectParameter("sellType", typeof(int));
    
            var sellPriceParameter = sellPrice.HasValue ?
                new ObjectParameter("sellPrice", sellPrice) :
                new ObjectParameter("sellPrice", typeof(long));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(int));
    
            var isFollowParameter = isFollow.HasValue ?
                new ObjectParameter("isFollow", isFollow) :
                new ObjectParameter("isFollow", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("P_ApplyTradeSell", accountIdParameter, holdIdParameter, sellCountParameter, sellTypeParameter, sellPriceParameter, typeParameter, isFollowParameter, errorCode, errorMessage, sellId);
        }
    
        public virtual int P_ApplyTradeCancel(Nullable<long> accountId, Nullable<long> entrustId, ObjectParameter errorCode, ObjectParameter errorMessage)
        {
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("accountId", accountId) :
                new ObjectParameter("accountId", typeof(long));
    
            var entrustIdParameter = entrustId.HasValue ?
                new ObjectParameter("entrustId", entrustId) :
                new ObjectParameter("entrustId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("P_ApplyTradeCancel", accountIdParameter, entrustIdParameter, errorCode, errorMessage);
        }
    
        public virtual int P_TradeFinish(Nullable<long> entrustManagerId, Nullable<long> dealPrice, Nullable<int> dealCount)
        {
            var entrustManagerIdParameter = entrustManagerId.HasValue ?
                new ObjectParameter("entrustManagerId", entrustManagerId) :
                new ObjectParameter("entrustManagerId", typeof(long));
    
            var dealPriceParameter = dealPrice.HasValue ?
                new ObjectParameter("dealPrice", dealPrice) :
                new ObjectParameter("dealPrice", typeof(long));
    
            var dealCountParameter = dealCount.HasValue ?
                new ObjectParameter("dealCount", dealCount) :
                new ObjectParameter("dealCount", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("P_TradeFinish", entrustManagerIdParameter, dealPriceParameter, dealCountParameter);
        }
    
        public virtual int P_TryToCancelEntrust(Nullable<long> entrustId)
        {
            var entrustIdParameter = entrustId.HasValue ?
                new ObjectParameter("entrustId", entrustId) :
                new ObjectParameter("entrustId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("P_TryToCancelEntrust", entrustIdParameter);
        }
    
        public virtual int P_TradeRecovery(Nullable<long> holdId, string code, Nullable<int> count, Nullable<long> price, ObjectParameter errorCode, ObjectParameter errorMessage)
        {
            var holdIdParameter = holdId.HasValue ?
                new ObjectParameter("holdId", holdId) :
                new ObjectParameter("holdId", typeof(long));
    
            var codeParameter = code != null ?
                new ObjectParameter("code", code) :
                new ObjectParameter("code", typeof(string));
    
            var countParameter = count.HasValue ?
                new ObjectParameter("count", count) :
                new ObjectParameter("count", typeof(int));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("price", price) :
                new ObjectParameter("price", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("P_TradeRecovery", holdIdParameter, codeParameter, countParameter, priceParameter, errorCode, errorMessage);
        }
    
        public virtual int P_AccountSetRefer(Nullable<long> accountId, string recommandCode, ObjectParameter errorCode, ObjectParameter errorMessage)
        {
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("accountId", accountId) :
                new ObjectParameter("accountId", typeof(long));
    
            var recommandCodeParameter = recommandCode != null ?
                new ObjectParameter("recommandCode", recommandCode) :
                new ObjectParameter("recommandCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("P_AccountSetRefer", accountIdParameter, recommandCodeParameter, errorCode, errorMessage);
        }
    }
}
